{"version":3,"sources":["lib/main.mjs"],"names":["require","install","gulp","gutil","mjs","mocha","es","path","module","exports","overrides","val0","null","_$8","buildTaskName","_$6","val1","_$11","testTaskName","_$9","val2","_$14","defaultTasks","_$12","paths","ignoreErrors","false","onError","err","log","stack","colors","red","message","_$18","emit","process","exit","_$16","combine","pipeline","apply","arguments","where","predicate","map","data","callback","isJavascriptFile","f","extname","javascriptFiles","compile","src","dest","true","on","testWithReporter","reporter","srcTest","destTest","task","console","srcMeta","destMeta","srcLib","destLib","watch","jsMeta","_$3","undefined"],"mappings":"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","sourcesContent":["require('source-map-support').install()\n\n#external\n  arguments\n  module\n  process\n\nvar\n  gulp = require 'gulp'\n  gutil = require 'gulp-util'\n  mjs = require 'gulp-mjs'\n  mocha = require 'gulp-mocha'\n  es = require 'event-stream'\n  path = require 'path'\n\n\nmodule.exports = (gulp, overrides) -> do!\n\n  var\n    build-task-name = overrides.?build-task-name || 'build'\n    test-task-name = overrides.?test-task-name || 'test'\n    default-tasks = overrides.?default-tasks || [test-task-name]\n\n  var\n    paths = {\n      src-meta: 'meta/**/*.mjs'\n      src-lib: 'lib/**/*.mjs'\n      src-test: 'test/**/*.mjs'\n      dest-meta: 'meta'\n      dest-lib: 'lib'\n      dest-test: 'test'\n    }\n\n    ignore-errors = false\n\n    on-error = err ->\n      gutil.log(err.stack || (gutil.colors.red(err.message)) || err)\n      if (ignore-errors)\n        this.emit('end')\n      else\n        process.exit 1\n\n    combine = #-> es.pipeline.apply(null, arguments)\n\n    where = predicate ->\n      es.map\n        (data, callback) ->\n          if (predicate(data))\n            callback(null, data)\n          else\n            callback()\n\n    javascript-file? = f -> f.path && (path.extname (f.path)) == '.js'\n    javascriptFiles = #-> where javascript-file?\n\n    compile = (src, dest) -> combine\n      gulp.src src\n      (mjs {debug: true}).on('error', on-error)\n      gulp.dest dest\n\n    test-with-reporter = reporter -> combine\n      compile(paths.src-test, paths.dest-test)\n      javascriptFiles()\n      (mocha {reporter: reporter}).on('error', on-error)\n\n  gulp.task\n    'build-meta'\n    #->\n      console.log \" *** build-meta\"\n      compile(paths.src-meta, paths.dest-meta)\n\n  gulp.task\n    build-task-name\n    ['build-meta']\n    #-> compile([paths.src-meta, paths.src-lib], paths.dest-lib)\n\n  gulp.task\n    test-task-name\n    [build-task-name]\n    #-> testWithReporter 'spec'\n\n  gulp.task\n    'test-xunit'\n    [build-task-name]\n    #-> testWithReporter 'xunit-file'\n\n  gulp.task\n    'autotest'\n    [build-task-name]\n    #->\n      ignore-errors = true\n      gulp.watch\n        [paths.src-meta, paths.js-meta, paths.src-lib, paths.src-test]\n        [test-task-name]\n\n  gulp.task('default', default-tasks);\n\n"]}